version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: myapp_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin pour la gestion de la base de données
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy

  # API FastAPI
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_app
    restart: always
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/myapp_db
      SECRET_KEY: your-secret-key-here
    ports:
      - "8000:8000"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Streamlit
  streamlit:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: streamlit_app
    restart: always
    environment:
      FASTAPI_URL: http://fastapi:8000
    ports:
      - "8501:8501"
    networks:
      - app_network
    depends_on:
      - fastapi
    volumes:
      - ./frontend:/app
    command: streamlit run main.py --server.address 0.0.0.0 --server.port 8501

  # Portainer pour la gestion des conteneurs
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  portainer_data:
    driver: local

networks:
  app_network:
    driver: bridge